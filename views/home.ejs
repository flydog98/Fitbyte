<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8" />
    <style>
      p {
        color: black;
        border-width: 8px;
        border-style: solid;
        border-color: rgb(241, 248, 213);
        padding: 15px;
        background-color: rgb(245, 248, 228);
        /* 축약형 */
        border: 5px solid rgba(82, 99, 116, 0);
        height: 400px;
        border-radius: 1.5rem;
        margin-right: 15px;
      }
      .aliceblue-background {
        background-color: aliceblue;
        min-height: 1000px
      }
      .search {
        color: rgb(15, 150, 150);
      }
      img {
        width: 600px;
        height: 400px;
      }

      .list-group-item {
        display: flex;
        align-items: center;
        padding: 10px;
        border-bottom: 1px solid #ccc;
      }

      .list-group-item input {
        margin-right: 10px;
      }

      .list-group-item strong {
        font-weight: bold;
      }

      .list-group-item small {
        color: #888;
      }

      .column {
        float: left;
        width: 50%;
        height: 300px;
        padding: 10px;
      }
      .column h2 {
        margin-top: 0;
      }
      .task {
        background-color: #f2f2f2;
        border: 1px solid #ddd;
        padding: 10px;
        margin-bottom: 10px;
        cursor: grab;
      }
      .task:active {
        cursor: grabbing;
      }

      .list-group {
        display: flex;
        flex-direction: column;
      }

      .list-group-item {
        display: flex;
        align-items: center;
        padding: 10px;
        border-bottom: 1px solid #ccc;
      }

      .list-group-item input {
        margin-right: 10px;
      }

      .list-group-item strong {
        font-weight: bold;
      }

      .list-group-item small {
        color: #888;
      }
    </style>
    <%- include('./partials/head') %>
  </head>
  <body>
    <%- include('./partials/nav') %>
    <div class="aliceblue-background">
      <div class="container mb-3">
        <div class="container px-4 py-5" id="icon-grid">
          <div class="list-group">
            <h2 class="pb-2 border-bottom">목표 운동 시간</h2>
            <% if (todayTimePromise && todayTimePromise.amount != null) { %>
            <div>
              오늘의 목표 시간: 
              <%= Math.floor(todayTimePromise.amount/60) %>시간 <%=
              todayTimePromise.amount%60 %>분
            </div>
            <% } else { %>
            <div>오늘의 목표 운동 시간을 설정해주세요.</div>
            <form method="POST" action="/time-promise">
              <label>목표 시간: </label>
              <input type="number" name="amount" min="1" max="1440" required />
              분
              <button type="submit">입력</button>
            </form>
            <% } %>
            <% if (timePromises.length != 0) { %>
            <table class="table table-light table-striped table-bordered">
              <caption>검증은 매일 새벽에 이뤄집니다</caption>
              <thead>
                <tr>
                  <td>번호</td>
                  <td>일시</td>
                  <td>목표 시간</td>
                  <td>달성 여부</td>
                  <td>제어</td>
                </tr>
              </thead>
              <tbody>
                <% for(var i = 0; i < timePromises.length; i++) { var data =
                timePromises[i]; %>
                <tr>
                  <td><%=i + 1%></td>
                  <td><%=moment(data.date).format("YYYY-MM-DD")%></td>
                  <td><%=data.amount%></td>
                  <td><%=data.achieved%></td>
                  <td>
                    <form action="/time-promise?_method=delete" method="post">
                      <input type="hidden" name="_id" value=
                      <%=data._id%>
                      >
                      <button type="submit">삭제</button>
                    </form>
                  </td>
                </tr>
                <% } %>
              </tbody>
            </table>
            <% }%>
          </div>

                <div style="margin-bottom: 40px"></div>

          <h2 class="pb-2 border-bottom">운동 약속</h2>
          <div class="list-group">
            <!--ADD-->
            <label>
              <form id="add-task-form" action="/self-promise" method="post">
                <div>
                  <label>날짜 : &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </label>
                  <input type="datetime-local" name="date" required />
                </div>
                <div>
                  <label>목표 시간: </label>
                  <input type="number" name="amount" required />
                </div>
                <div>
                  <label>운동 내용: </label>
                  <input type="text" name="contents" required />
                  <button type="submit">추가</button>
                </div>
              </form>
            </label>
            <% if (selfPromises.length != 0) { %>
            <table class="table table-light table-striped table-bordered">
              <thead>
                <tr>
                  <td>번호</td>
                  <td>일시</td>
                  <td>목표 시간</td>
                  <td>운동 내용</td>
                  <td>달성 여부</td>
                  <td>제어</td>
                </tr>
              </thead>
              <tbody>
                <% for(var i = 0; i < selfPromises.length; i++) { var data =
                selfPromises[i]; %>
                <tr>
                  <td><%=i + 1%></td>
                  <td><%=moment(data.date).format("YYYY-MM-DD HH:mm")%></td>
                  <td><%=data.amount%></td>
                  <td><%=data.contents%></td>
                  <td><%=data.achieved%></td>
                  <td>
                    <form action="/self-promise?_method=patch" method="post">
                      <input type="hidden" name="_id" value=
                      <%=data._id%>
                      >
                      <button type="submit">달성</button>
                    </form>
                    <form action="/self-promise?_method=delete" method="post">
                      <input type="hidden" name="_id" value=<%=data._id%> >
                      <button type="submit">삭제</button>
                    </form>
                  </td>
                </tr>
                <% } %>
              </tbody>
            </table>
            <% } %>
          </div>
          <div style="margin-bottom: 40px"></div>

          <h2 class="pb-2 border-bottom">FitByte 수집 데이터</h2>
          <a
            href="http://13.209.155.211:3000/d/b1851fe4-77e8-42cb-976f-64ab5e30df6b/raspberrypi-test?orgId=1"
            target="_blank"
            style="color: blue; font-size: 25px"
            >link</a
          >

          <div style="margin-bottom: 40px"></div>

          <h2 class="pb-2 border-bottom">주변 운동시설 및 등산로</h2>
          <% if (exercise == null) { %>
            <form action="/<%=user%>" method="get">
              <label>위치를 입력하세요: </label>
              <input type="text" name="location" required />
              <button type="submit">검색</button>
            </form>
          <% } else { %>
            <div>
              <%= exercise.locationame %>의 운동시설 및 등산로
            </div>
            <table class="table table-light table-striped table-bordered">
              <thead>
                <tr>
                  <td>번호</td>
                  <td>구분</td>
                  <td>위치</td>
                  </tr>
              </thead>
              <tbody>
                <tr>
                  <td>1</td>
                  <td>산</td>
                  <td><%=exercise.mntn_nm%></td>
                </tr>
                <% for(var i = 0; i < exercise.gyms.length; i++) { var data = exercise.gyms[i] %>
                <tr>
                  <td><%=i + 2%></td>
                  <td>운동시설</td>
                  <td><%=data%></td>
                </tr>
                <% } %>
              </tbody>
            </table>
          <% } %>
        </div>
      </div>
    </div>
  </body>


  <script>

  // 환경 변수 clientId 가져와서, fitbit권한 인증 링크 생성
  function fetchConfig() {
    fetch('http://localhost:8888/api/config', {
      method: 'GET',
      cache: 'no-cache' // 캐시 무시 옵션 추가
    })
      .then(response => response.json())
      .then(data => {
        const clientId = data.clientId;
        // fitbit 권한 인증 이후에 callback으로 리다이렉트
        const fitbitAuthURL = `https://www.fitbit.com/oauth2/authorize?response_type=code&client_id=${clientId}&scope=activity%20profile%20location&redirect_uri=http://localhost:8888/fitbit/callback`;
        document.querySelector("#fitbit-auth-link").setAttribute("href", fitbitAuthURL);
      })
      .catch(error => {
        console.error('Error:', error);
      });
  }

window.addEventListener('load', fetchConfig); // 페이지 로드될때마다 fetchconfig 호출
  </script>

</html>

<!-- //         // 서버로부터 액세스 토큰 응답 받아 처리
//         const accessToken = data.accessToken;
//         localStorage.setItem('accessToken', accessToken);
//         // 클라이언트에서 액세스 토큰을 저장하거나 사용가능
//         fetchFitbitActivity()
//         .then(activityData => {
//         // 목표 달성 메시지
//         //const timePromiseAmount = data.timePromiseAmount; // time-promise에서 가져온 값
//         const activityAmount = data.activityAmount; // 운동 시간 데이터

//         if (activityAmount >= todayTimePromise) {
//           document.querySelector("#message").innerText = "운동 시간 목표를 달성했습니다!";
//         } else {
//           document.querySelector("#message").innerText = "운동 시간 목표를 달성하지 못했습니다.";
//         }
//       })
//       .catch(error => {
//         console.error('Error:', error);
//       });
//     })
//     .catch(error => {
//       console.error('Error', error);
//     });
//   }
// }

        // return fetch('http://localhost:8888/fitbit/callback', {
        //   method: 'GET',
        //   cache: 'no-cache'
        // })
        // .then(response => response.json())
        // .then(data => {
        //   const accessToken = data.accessToken;
        // })
    //const accessToken = getCookie('accessToken');

//     if (accessToken) {
//       console.log('액세스 토큰 잘 가져와졌음');

//     const baseUrl = 'https://api.fitbit.com/1/user/-/activities/list.json';
//     const beforeDate = 'today';
//     const sort = 'desc';
//     const limit = 100;

//     const queryParams = new URLSearchParams({
//       beforeDate,
//       sort,
//       limit
//     });

//     // 인증 토큰 붙이기
//     const requestUrl = `${baseUrl}?${queryParams.toString()}`;

//     const headers = {
//       'Authorization': `Bearer ${accessToken}`
//     };

//     return fetch(requestUrl, { headers })
//       .then(response => response.json())
//       .then(data => {
//         return data.activities.map(activity => {
//           return activity.activeZoneMinutes.minutesInHeartRateZones.minutes;
//         })
//       })
//       .catch(error => {
//         console.error('Error:', error);
//       });
//   } else {
//     console.log('액세스 토큰 없음');
//     return Promise.reject(new Error('액세스 토큰 없음'));
//   }
// }
    //const accessToken = getCookie('accessToken');


// 쿠키에서 특정 이름의 쿠키값을 가져오는 함수
// function getCookie(name) {
//   const cookies = document.cookie.split(';');
//   for (let i = 0; i < cookies.length; i++) {
//     const cookie = cookies[i].trim();
//     if (cookie.startsWith(name + '=')) {
//       return cookie.substring(name.length + 1);
//     }
//   }
//   return null;
// }

// 페이지 로드 시 fetchConfig 함수 호출
// window.addEventListener('load', fetchConfig);
    // 페이지 로드 시 인증 코드 추출 함수,  환경 변수 값 가져오는 함수 호출 -->